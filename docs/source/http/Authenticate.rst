Authenticate
============

.. contents::
   :local:

Authenticate v1
---------------

Имя ресурса: **/Authenticate**

HTTP метод: **POST**

Параметры строки запроса:

-  *login*: имя учетной записи пользователя при авторизации по логину/паролю (может отсутствовать);

-  *password*: пароль учетной записи пользователя при авторизации по логину/паролю (обязателен при наличии параметра *login*);

-  *key*: ключ, полученный доверенным сервисом (может отсутствовать);

-  *id*: идентификатор пользователя доверенного сервиса (обязателен при наличии параметра *key*);

Тело запроса:

-  в случае авторизации по сертификату должно содержать :rfc:`X.509 <5280>` сертификат пользователя, сериализованный в `DER <http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf>`__.

-  в остальных случаях должно быть пустым

HTTP-заголовки:

-  ``Authorization`` с параметром *ddauth_api_client_id* (обязательный, см. раздел :doc:`Авторизация <../Authorization>`).

Для аутентификации по ключу, полученному доверенным сервисом, нужно передать этот ключ в параметре *key* (не поддерживается при аутентификации по сертификату).

В случае успешного выполнения запроса:

- если авторизация производится по логину/паролю или по ключу, полученному доверенным сервисом, тело ответа следует интерпретировать как строку в кодировке UTF-8, содержащую авторизационный токен;

- если авторизация производится по сертификату, то выдаваемый токен будет зашифрован в адрес пользовательского сертификата. В этом случае тело ответа следует интерпретировать как структуру :rfc:`CMS EnvelopedData <5652#section-6>` в DER-кодировке;

В случае авторизации по логину/паролю с указанием ключа, полученного доверенным сервисом, привязка пользователя доверенного сервиса сохраняется автоматически (см. описание привязки в методе :doc:`AuthenticateConfirm`).

Возможные HTTP-коды возврата:

-  200 (OK) - операция успешно завершена;

-  400 (Bad Request) - данные в запросе имеют неверный формат или отсутствуют обязательные параметры;

-  401 (Unauthorized) - в запросе отсутствует HTTP-заголовок ``Authorization``, или в этом заголовке отсутствует параметр *ddauth_api_client_id*, или переданный в нем ключ разработчика не зарегистрирован в Диадоке;

-  405 (Method not allowed) - используется неподходящий HTTP-метод;

-  500 (Internal server error) - при обработке запроса возникла непредвиденная ошибка.

Authenticate v2
---------------

Имя ресурса: **/V2/Authenticate**

HTTP метод: **POST**

Параметры строки запроса:

-  *login*: имя учетной записи пользователя при авторизации по логину/паролю (может отсутствовать);

-  *password*: пароль учетной записи пользователя при авторизации по логину/паролю (обязателен при наличии параметра *login*);

-  *key*: ключ, полученный доверенным сервисом (может отсутствовать);

-  *id*: идентификатор пользователя доверенного сервиса (обязателен при наличии параметра *key*);

Тело запроса:

-  в случае авторизации по сертификату должно содержать :rfc:`X.509 <5280>` сертификат пользователя, сериализованный в `DER <http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf>`__.

-  в остальных случаях тело запроса должно быть пустым

HTTP-заголовки:

-  ``Authorization`` с параметром *ddauth_api_client_id* (обязательный, см. раздел :doc:`Авторизация <../Authorization>`).

Для аутентификации по ключу, полученному доверенным сервисом, нужно передать этот ключ в параметре *key* (не поддерживается при аутентификации по сертификату).

В случае успешного выполнения запроса:

- если авторизация производится по логину/паролю или по ключу, полученному доверенным сервисом, тело ответа следует интерпретировать как строку в кодировке UTF-8, содержащую авторизационный токен;

- авторизация по сертификату является двухфазной. В этом случае ответ следует интерпретировать как зашифрованную строку. Для получения авторизационного токена необходимо расшифровать ее сертификатом с закрытым ключом и подтвердить расшифровку с помощью запроса :doc:`AuthenticateConfirm`;

В случае авторизации по логину/паролю с указанием ключа, полученного доверенным сервисом, привязка пользователя доверенного сервиса сохраняется автоматически (см. описание привязки в методе :doc:`AuthenticateConfirm`).

Возможные HTTP-коды возврата:

-  200 (OK) - операция успешно завершена;

-  400 (Bad Request) - данные в запросе имеют неверный формат или отсутствуют обязательные параметры;

-  401 (Unauthorized) - в запросе отсутствует HTTP-заголовок ``Authorization``, или в этом заголовке отсутствует параметр *ddauth_api_client_id*, или переданный в нем ключ разработчика не зарегистрирован в Диадоке;

-  405 (Method not allowed) - используется неподходящий HTTP-метод;

-  500 (Internal server error) - при обработке запроса возникла непредвиденная ошибка.

Типовые сценарии аутентификации
-------------------------------

1. Аутентификация по логину/паролю

.. uml::

   Client -> DiadocApi : /Authenticate?login=login&password=password
   Client <- DiadocApi : UTF8-строка (token)
   Client -> DiadocApi : можно использовать методы API с token

2. Аутентификация по логину/паролю с ключом, полученным доверенным сервисом

.. uml::

   Client -> DiadocApi : /Authenticate?login=login&password=password&key=key&id=serviceUserId
   Client <- DiadocApi : UTF8-строка (token)
   Client -> DiadocApi : можно использовать методы API с token

3. Аутентификация с ключом, полученным доверенным сервисом

.. uml::

   Client -> DiadocApi : /Authenticate?key=key&id=serviceUserId
   Client <- DiadocApi : UTF8-строка (token)
   Client -> DiadocApi : можно использовать методы API с token

4. Аутентификация по сертификату (V1)

.. uml::

   Client -> DiadocApi : /Authenticate (тело запроса = X509 Certificate)
   Client <- DiadocApi : encryptedToken
   Client -> Client : token = decrypt(encryptedToken)
   Client -> DiadocApi : можно использовать методы API с token

5. Двухфазная аутентификация по сертификату (V2)

.. uml::

   Client -> DiadocApi : /V2/Authenticate (тело запроса = X509 Certificate)
   Client <- DiadocApi : зашифрованная строка str
   Client -> Client : decryptedStr = to_base64(decrypt(str))
   Client -> DiadocApi : /V2/AuthenticateConfirm?thumbprint=thumbprint&token=decryptedStr
   Client <- DiadocApi : UTF8-строка (token)
   Client -> DiadocApi : можно использовать методы API с token

6. Двухфазная аутентификация по сертификату (V2) с ключом, полученным доверенным сервисом

.. uml::

   Client -> DiadocApi : /V2/Authenticate?key=key&id=serviceUserId (тело запроса = X509 Certificate)
   Client <- DiadocApi : зашифрованная строка str
   Client -> Client : decryptedStr = to_base64(decrypt(str))
   Client -> DiadocApi : /V2/AuthenticateConfirm?thumbprint=thumbprint&token=decryptedStr
   Client <- DiadocApi : UTF8-строка (token)
   Client -> DiadocApi : можно использовать методы API с token
